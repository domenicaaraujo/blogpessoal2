{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domenica\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\blog c\\xE9u\\\\src\\\\componentes\\\\temas\\\\cadastrarTema\\\\CadastrarTema.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Container, TextField, Typography } from '@material-ui/core';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { buscaId, post, put } from '../../../services/Service';\nimport './CadastrarTema.css';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CadastroTema() {\n  _s();\n\n  let history = useHistory();\n  const {\n    id\n  } = useParams();\n  const token = useSelector(state => state.tokens);\n  const [tema, setTema] = useState({\n    id: 0,\n    descricao: ''\n  });\n  useEffect(() => {\n    if (token === \"\") {\n      toast.error('Você precisa estar logado', {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        theme: \"colored\",\n        progress: undefined\n      });\n      history.push(\"/login\");\n    }\n  }, [token]);\n\n  async function findById(id) {\n    await buscaId(`/temas/${id}`, setTema, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (id !== undefined) {\n      findById(id);\n    }\n  }, [id]);\n\n  function updatedModel(e) {\n    setTema({ ...tema,\n      [e.target.name]: e.target.value,\n      postagem: [{}] // Configura para que o campo de Postagem do tema escolhido fique vazio\n\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (id !== undefined) {\n      try {\n        await put(`/temas`, tema, setTema, {\n          headers: {\n            'Authorization': token\n          }\n        });\n        toast.success('Tema atualizado com sucesso', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: \"colored\",\n          progress: undefined\n        });\n      } catch (error) {\n        console.log(`Error: ${error}`);\n        toast.error('Tema erro ao atualizar.', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: \"colored\",\n          progress: undefined\n        });\n      }\n    } else {\n      try {\n        await post(`/temas`, tema, setTema, {\n          headers: {\n            'Authorization': token\n          }\n        });\n        toast.success('Tema cadastrado com sucesso', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: \"colored\",\n          progress: undefined\n        });\n      } catch (error) {\n        console.log(`Error: ${error}`);\n        toast.error('Erro ao atualizar.', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: \"colored\",\n          progress: undefined\n        });\n      }\n    }\n\n    back();\n  }\n\n  function back() {\n    history.push('/temas');\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"cadastra-tema\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        className: \"h1-tema\",\n        align: \"center\",\n        children: \"Cadastrar tema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: tema.descricao,\n        onChange: e => updatedModel(e),\n        id: \"descricao\",\n        label: \"descricao\",\n        variant: \"outlined\",\n        name: \"descricao\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        id: \"botao-tema\",\n        children: \"Finalizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CadastroTema, \"Q0u5/4KyiJxVZSE8LBYyyFlsapk=\", false, function () {\n  return [useHistory, useParams, useSelector];\n});\n\n_c = CadastroTema;\nexport default CadastroTema;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastroTema\");","map":{"version":3,"sources":["C:/Users/Domenica/OneDrive/Área de Trabalho/blog céu/src/componentes/temas/cadastrarTema/CadastrarTema.tsx"],"names":["React","useState","useEffect","Button","Container","TextField","Typography","useHistory","useParams","buscaId","post","put","useSelector","toast","CadastroTema","history","id","token","state","tokens","tema","setTema","descricao","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","push","findById","headers","updatedModel","e","target","name","value","postagem","onSubmit","preventDefault","success","console","log","back"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, ChangeEvent} from 'react'\r\nimport { Button, Container, TextField, Typography } from '@material-ui/core'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport useLocalStorage from 'react-use-localstorage'\r\nimport { buscaId, post, put } from '../../../services/Service'\r\nimport Tema from '../../../models/Tema'\r\nimport './CadastrarTema.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { UserState } from '../../../store/tokens/tokensReducer'\r\nimport { toast } from 'react-toastify'\r\n\r\n\r\nfunction CadastroTema() {\r\n\r\n    let history = useHistory()\r\n\r\n    const { id } = useParams<{ id: string }>()\r\n\r\n    const token = useSelector<UserState, UserState [\"tokens\"]>(\r\n        (state) => state.tokens\r\n    )\r\n\r\n    const [tema, setTema] = useState<Tema>({\r\n        id: 0,\r\n        descricao: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (token === \"\") {\r\n            toast.error('Você precisa estar logado', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                theme: \"colored\",\r\n                progress: undefined,\r\n                });\r\n            history.push(\"/login\")\r\n        }\r\n    }, [token])\r\n\r\n    async function findById(id: string) {\r\n        await buscaId(`/temas/${id}`, setTema, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id !== undefined) {\r\n            findById(id)\r\n        }\r\n    }, [id])\r\n\r\n    function updatedModel(e: ChangeEvent<HTMLInputElement>) {\r\n        setTema({\r\n            ...tema,\r\n            [e.target.name]: e.target.value,\r\n            postagem: [{}]  // Configura para que o campo de Postagem do tema escolhido fique vazio\r\n        })\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        if (id !== undefined) {\r\n\r\n            try {\r\n                await put(`/temas`, tema, setTema, {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n\r\n                toast.success('Tema atualizado com sucesso', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: \"colored\",\r\n                    progress: undefined,\r\n                    });\r\n\r\n            } catch (error) {\r\n                console.log(`Error: ${error}`)\r\n                toast.error('Tema erro ao atualizar.', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: \"colored\",\r\n                    progress: undefined,\r\n                    });\r\n            }\r\n\r\n        } else {\r\n\r\n            try {\r\n                await post(`/temas`, tema, setTema, {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                \r\n                toast.success('Tema cadastrado com sucesso', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: \"colored\",\r\n                    progress: undefined,\r\n                    });\r\n                \r\n            } catch (error) {\r\n                console.log(`Error: ${error}`)\r\n                toast.error('Erro ao atualizar.', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: \"colored\",\r\n                    progress: undefined,\r\n                    });\r\n            }\r\n        }\r\n         \r\n        back()\r\n\r\n    }\r\n\r\n    function back() {\r\n        history.push('/temas')\r\n    }\r\n  \r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"cadastra-tema\">\r\n            <form onSubmit={onSubmit}>\r\n                <Typography variant=\"h3\" className=\"h1-tema\" align=\"center\" >Cadastrar tema</Typography>\r\n                <TextField value={tema.descricao} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)} id=\"descricao\" label=\"descricao\" variant=\"outlined\" name=\"descricao\" margin=\"normal\" fullWidth />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" id='botao-tema'>\r\n                    Finalizar\r\n                </Button>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CadastroTema;"]},"metadata":{},"sourceType":"module"}