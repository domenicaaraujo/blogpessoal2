{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Domenica\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\blog c\\xE9u\\\\src\\\\componentes\\\\postagens\\\\cadastrarPostagem\\\\CadastrarPostagem.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\";\nimport './CadastrarPostagem.css';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { busca, buscaId, post, put } from '../../../services/Service';\nimport './CadastrarPostagem.css';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CadastrarPostagem() {\n  _s();\n\n  let history = useHistory();\n  const {\n    id\n  } = useParams();\n  const [temas, setTemas] = useState([]);\n  const token = useSelector(state => state.tokens);\n  const [tema, setTema] = useState({\n    id: 0,\n    descricao: ''\n  });\n  const userId = useSelector(state => state.id);\n  const [postagem, setPostagem] = useState({\n    id: 0,\n    titulo: '',\n    texto: '',\n    tema: null,\n    usuario: null\n  });\n  const [user, setUser] = useState({\n    id: +userId,\n    // Faz uma conversão de String para Number\n    nome: '',\n    usuario: '',\n    senha: '',\n    foto: ''\n  });\n  useEffect(() => {\n    if (token === \"\") {\n      toast.error('Usuario precisa estar logado.', {\n        position: 'top-right',\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        theme: 'colored',\n        progress: undefined\n      });\n      history.push(\"/login\");\n    }\n  }, [token]);\n  useEffect(() => {\n    setPostagem({ ...postagem,\n      tema: tema\n    });\n  }, [tema]);\n  useEffect(() => {\n    getTemas();\n\n    if (id !== '') {\n      findByIdPostagem(id);\n    }\n  }, [id]);\n\n  async function getTemas() {\n    await busca(\"/temas\", setTemas, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  async function findByIdPostagem(id) {\n    await buscaId(`postagens/${id}`, setPostagem, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  function updatedPostagem(e) {\n    setPostagem({ ...postagem,\n      [e.target.name]: e.target.value,\n      tema: tema,\n      usuario: user\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (id !== undefined) {\n      try {\n        await put(`/postagens`, postagem, setPostagem, {\n          headers: {\n            'Authorization': token\n          }\n        });\n        toast.success('Postagem atualizada com sucesso.', {\n          position: 'top-right',\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: 'colored',\n          progress: undefined\n        });\n      } catch (error) {\n        toast.info('Usuário deslogado.', {\n          position: 'top-right',\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: 'colored',\n          progress: undefined\n        });\n      }\n    } else {\n      try {\n        await post(`/postagens`, postagem, setPostagem, {\n          headers: {\n            'Authorization': token\n          }\n        });\n        toast.success('Postagem cadastrada com sucesso.', {\n          position: 'top-right',\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: 'colored',\n          progress: undefined\n        });\n      } catch (error) {\n        toast.error('Dados inconsistentes. Favor verificar as informações.', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: \"colored\",\n          progress: undefined\n        });\n      }\n    }\n\n    back();\n  }\n\n  function back() {\n    history.push('/postagens');\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"largura\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      className: \"cadastra-postagem\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        className: \"h1-postagem\",\n        component: \"h1\",\n        align: \"center\",\n        children: \"Cadastrar postagem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.titulo,\n        onChange: e => updatedPostagem(e),\n        id: \"titulo\",\n        label: \"titulo\",\n        variant: \"outlined\",\n        name: \"titulo\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        value: postagem.texto,\n        onChange: e => updatedPostagem(e),\n        id: \"texto\",\n        label: \"texto\",\n        name: \"texto\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-helper-label\",\n          children: \"Tema \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-helper-label\",\n          id: \"demo-simple-select-helper\",\n          onChange: e => buscaId(`/temas/${e.target.value}`, setTema, {\n            headers: {\n              'Authorization': token\n            }\n          }),\n          children: temas.map(tema => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: tema.id,\n            children: tema.descricao\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: \"Escolha um tema para a postagem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Finalizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CadastrarPostagem, \"8c7gkP3Y/mJKfovKM/7vqrtdBiI=\", false, function () {\n  return [useHistory, useParams, useSelector, useSelector];\n});\n\n_c = CadastrarPostagem;\nexport default CadastrarPostagem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastrarPostagem\");","map":{"version":3,"sources":["C:/Users/Domenica/OneDrive/Área de Trabalho/blog céu/src/componentes/postagens/cadastrarPostagem/CadastrarPostagem.tsx"],"names":["React","useEffect","useState","Container","Typography","TextField","Button","Select","InputLabel","MenuItem","FormControl","FormHelperText","useHistory","useParams","busca","buscaId","post","put","useSelector","toast","CadastrarPostagem","history","id","temas","setTemas","token","state","tokens","tema","setTema","descricao","userId","postagem","setPostagem","titulo","texto","usuario","user","setUser","nome","senha","foto","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","progress","undefined","push","getTemas","findByIdPostagem","headers","updatedPostagem","e","target","name","value","onSubmit","preventDefault","success","info","back","map"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Container, Typography, TextField, Button, Select, InputLabel, MenuItem, FormControl, FormHelperText } from \"@material-ui/core\"\r\nimport './CadastrarPostagem.css';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Tema from '../../../models/Tema';\r\nimport useLocalStorage from 'react-use-localstorage';\r\nimport Postagem from '../../../models/Postagem';\r\nimport { busca, buscaId, post, put } from '../../../services/Service';\r\nimport './CadastrarPostagem.css'\r\nimport { useSelector } from 'react-redux';\r\nimport { UserState } from '../../../store/tokens/tokensReducer';\r\nimport { toast } from 'react-toastify';\r\nimport User from '../../../models/User';\r\n\r\nfunction CadastrarPostagem() { \r\n    let history = useHistory()\r\n\r\n    const { id } = useParams<{ id: string }>()\r\n\r\n    const [temas, setTemas] = useState<Tema[]>([])\r\n\r\n    const token = useSelector<UserState, UserState [\"tokens\"]>(\r\n        (state) => state.tokens\r\n    )\r\n\r\n    const [tema, setTema] = useState<Tema>({\r\n        id: 0,\r\n        descricao: ''\r\n    })\r\n\r\n    const userId = useSelector<UserState, UserState[\"id\"]>(\r\n        (state) => state.id\r\n    );\r\n\r\n    const [postagem, setPostagem] = useState<Postagem>({\r\n        id: 0,\r\n        titulo: '',\r\n        texto: '',\r\n        tema: null,\r\n        usuario: null\r\n    })\r\n\r\n    const [user, setUser] = useState<User>({\r\n        id: +userId,    // Faz uma conversão de String para Number\r\n        nome: '',\r\n        usuario: '',\r\n        senha: '',\r\n        foto: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (token === \"\") {\r\n            toast.error('Usuario precisa estar logado.', {\r\n                position: 'top-right',\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                theme: 'colored',\r\n                progress: undefined,\r\n            });\r\n            history.push(\"/login\")\r\n        }\r\n    }, [token])\r\n\r\n    useEffect(() => {\r\n        setPostagem({\r\n            ...postagem,\r\n            tema: tema\r\n        })\r\n    }, [tema])\r\n\r\n    useEffect(() => {\r\n        getTemas()\r\n        if (id !== '') {\r\n            findByIdPostagem(id)\r\n        }\r\n    }, [id])\r\n\r\n    async function getTemas() {\r\n        await busca(\"/temas\", setTemas, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    async function findByIdPostagem(id: string) {\r\n        await buscaId(`postagens/${id}`, setPostagem, {\r\n            headers: {\r\n                'Authorization': token\r\n            }\r\n        })\r\n    }\r\n\r\n    function updatedPostagem(e: ChangeEvent<HTMLInputElement>) {\r\n        setPostagem({\r\n            ...postagem,\r\n            [e.target.name]: e.target.value,\r\n            tema: tema,\r\n            usuario: user\r\n        })\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        if (id !== undefined) {\r\n            try {\r\n                await put(`/postagens`, postagem, setPostagem, {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                toast.success('Postagem atualizada com sucesso.', {\r\n                    position: 'top-right',\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: 'colored',\r\n                    progress: undefined,\r\n                });\r\n            } catch (error) {\r\n                toast.info('Usuário deslogado.', {\r\n                    position: 'top-right',\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: 'colored',\r\n                    progress: undefined,\r\n                });\r\n            }\r\n\r\n        } else {\r\n            try {\r\n                await post(`/postagens`, postagem, setPostagem, {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                toast.success('Postagem cadastrada com sucesso.', {\r\n                    position: 'top-right',\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: 'colored',\r\n                    progress: undefined,\r\n                });\r\n            } catch (error) {\r\n                toast.error('Dados inconsistentes. Favor verificar as informações.', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    theme: \"colored\",\r\n                    progress: undefined,\r\n                    });            }\r\n        }\r\n        back()\r\n    }\r\n\r\n    function back() {\r\n        history.push('/postagens')\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className='largura'>\r\n            <form onSubmit={onSubmit} className='cadastra-postagem'>\r\n                <Typography variant=\"h3\" className='h1-postagem' component=\"h1\" align=\"center\" >Cadastrar postagem</Typography>\r\n                <TextField value={postagem.titulo} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"titulo\" label=\"titulo\" variant=\"outlined\" name=\"titulo\" margin=\"normal\" fullWidth />\r\n                <TextField value={postagem.texto} onChange={(e: ChangeEvent<HTMLInputElement>) => updatedPostagem(e)} id=\"texto\" label=\"texto\" name=\"texto\" variant=\"outlined\" margin=\"normal\" fullWidth />\r\n\r\n                <FormControl >\r\n                    <InputLabel id=\"demo-simple-select-helper-label\">Tema </InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-helper-label\"\r\n                        id=\"demo-simple-select-helper\"\r\n                        onChange={(e) => buscaId(`/temas/${e.target.value}`, setTema, {\r\n                            headers: {\r\n                                'Authorization': token\r\n                            }\r\n                        })}>\r\n                        {\r\n                            temas.map(tema => (\r\n                                <MenuItem value={tema.id}>{tema.descricao}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    <FormHelperText>Escolha um tema para a postagem</FormHelperText>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        Finalizar\r\n                    </Button>\r\n                </FormControl>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\nexport default CadastrarPostagem;"]},"metadata":{},"sourceType":"module"}